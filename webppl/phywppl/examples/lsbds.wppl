/** 
 * @file 
 * Example: LSBDS
 * 
 * To run the example use:
 * 
 * npm run wppl examples/lsbds.wppl [N]
 * 
 * where [N] is the number of iterations, for example 3
 *
 */


/** 
 * Tree selection
 * uncomment the observed tree that you would like 
 * or use the read_phyjson function to read in a tree in the PhyJSON format 
 */
//var tree   = phyjs.example_2;
var tree = phyjs.bisse_32;

//var tree =  phyjs.read_phyjson("../../data/bisse_32.phyjson")
//var tree = phylodata.primates_61;
//var tree = phylodata.cetacean_87;
//var tree = phylodata.read_phyjson("example.json")


/**
 * Model specification
 */
var model = function()
{
    // Define priors for model parameters
    // We define lambdaFun_0 and mu_0 here, as the survivorship
    // bias is dependent on these parameters, and it is not obvious
    // that they should be drawn in the same way as in the process
    // generating the tree after the time of origin
    // var DistLambda  = Gamma( {shape:1, scale:1} )
    // var DistMu      = Gamma( {shape:1, scale:1} )

    // var DistLambda = function() {
    //	return (Math.exp(uniform( { a:Math.log(1e-2), b:Math.log(1e1) } )))
    // }


    // var DistMu = function(lambda_0) {
    // var epsilon = uniform( { a:0.0, b:1.0 } )
    // return (epsilon*lambda_0)
    // }
    
    // var lambda_0    = DistLambda()
    // var mu_0        = DistMu(lambda_0)
    // var eta       = gamma( {shape:1, scale:1} )

    // does not seem to be very good
    // var eta = exponential( { a: 1/ tree.age } )
  
    // Test settings
    var lambda_0    = 0.2
    var epsilon = 0.5
    var mu_0 = lambda_0 * epsilon
    // var mu_    = 0.1
    //var eta       = 0.000001
    var eta = exponential( {a: tree.age} )
    var rho         = 0.1

    var DistLambda = function() {
	return (lambda_0)
    }

    var DistMu = function(lambda) {
	return epsilon * lambda
    }



    // Settings from Hoehna et al.
    
    
    
    // Simulate conditionally on the tree
    // It returns all variables of interest
    var ret = simLSBDS( tree, lambda_0, mu_0, eta, DistLambda, DistMu, rho )
    
    // Condition on detection
    var max_M = 10000
    var M = M_lsbdsGoesUndetected( tree.age, lambda_0, mu_0, eta, DistLambda, DistMu, rho, max_M )
    factor(Math.log(M))

    return ret
}


/**
 * Inference
 * tweak the number of particles if you want to */
var particles = 5000
var dist = Infer( {method: 'SMC', particles: particles, model: model} );


/** 
 *Print the distribution or the normalization constant
 */
// dist;
dist.normalizationConstant;
